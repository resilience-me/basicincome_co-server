{"filter":false,"title":"a","tooltip":"/a","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":221,"column":0},"action":"insert","lines":["// the server module collects data from a financial platform","// this example collects data from Ripple","// you could easily create a module for BTC, or Ethereum, or whatever","","exports.connect = function(db){","    "," /* Loading ripple-lib with Node.js */","var ripple = require('ripple-lib')","var Remote = ripple.Remote;","","","var remote = new Remote({","  // see the API Reference for available options","  servers: [ 'wss://s1.ripple.com:443' ]","});","","remote.connect(function() {","    console.log(\"connected to Ripple\")","  /* remote connected */","","});//end remote connect","","var get_all_collections =require('./get_all_collections.js')","get_all_collections.get_all_collections(function(accounts){","                request_subscribe(accounts)","","})","","","    ","","","// ---------------------------- connect to rippled -----------------------------","","function request_subscribe(accounts){","    ","// ---------------------------- connect to ripple-lib -----------------------------","","","var req = remote.request_subscribe();","req.message.accounts = accounts","console.log(req.message.accounts)","req.request();","remote.on('transaction', function(data){"," ","","console.log(data.engine_result_message)","","// ---------------------------- connect BTC-transaction","","var COLLECTION = db.collection(data.transaction.Destination);","","// filter out transactions","","","","","","","if(data.transaction.Amount.currency === \"RES\"){","                transaction()","","}","","","function transaction(){","        ","    //get taxRate","     db.collection(data.transaction.Destination).findOne({type: \"contract\", currency: data.transaction.Amount.currency}, function(err,doc){","            var taxRate;","","            if(doc === null)consumption_outside_network()","            else{","            taxRate = doc.taxRate","            console.log(taxRate)","            update_collection(taxRate)","            } ","    }) ","   ","}  ","         ","function consumption_outside_network(){","    ","    // upsert extra-network consumption","    db.collection(data.transaction.Account).findAndModify({","        query: {type: \"consumption_outside_network\", currency: data.transaction.Amount.currency}, ","        update:{$inc:{total_amount:Number(data.transaction.Amount.value)}}, ","        upsert: true,","        new: true","        ","    }, ","        function(err,doc){","            console.log(doc)","        })    ","    ","}","","","              ","    function update_collection(taxRate){    ","        ",""," ","        ","        ","    // upsert dividend_pathways","    db.collection(data.transaction.Destination).findAndModify({","        query: {type: \"dividend_pathway\", account: data.transaction.Account, currency: data.transaction.Amount.currency, taxRate: taxRate}, ","        update:{$inc:{total_pathway:Number(data.transaction.Amount.value)}}, ","        upsert: true,","        new: true","        ","    }, ","        function(err,doc){","            console.log(doc)","        })","        ","    // upsert safety_net pathway (mirror of dividend pathway)","    db.collection(data.transaction.Account).findAndModify({","        query: {type: \"safety_net_pathway\", account: data.transaction.Destination, currency: data.transaction.Amount.currency, taxRate: taxRate}, ","        update:{$inc:{total_pathway:Number(data.transaction.Amount.value)}}, ","        upsert: true,","        new: true","        ","    }, ","        function(err,doc){","            console.log(doc)","        })","","        ","   // upsert safety net (sum of all safety_net_pathways)","    db.collection(data.transaction.Account).findAndModify({","        query: {type: \"total_safety_net\", currency: data.transaction.Amount.currency, taxRate: taxRate}, ","        update:{$inc:{total_pathway:Number(data.transaction.Amount.value)}}, ","        upsert: true,","        new: true","        ","    }, ","        function(err,doc){","            console.log(doc)","        })","","","COLLECTION.findAndModify({","        query: {type: \"tax_blob\", currency: data.transaction.Amount.currency}, ","        update:{$inc:{total_amount:Number(data.transaction.Amount.value)*taxRate}}, ","        upsert: true,","        new: true","        ","    }, ","        function(err,doc){","        })","}","","","// ------------------------- upsert accumulated dividends","","// need swarm-algorithm","","var swarm = require('./swarm_redistribution.js')","","","","swarm.compute_swarm(data.transaction.Account, upsert_accumulated_dividend)","","","function upsert_accumulated_dividend(lines) {","","var dividend_piece = data.transaction.Amount.value / lines.length","",""," for(var i=0;i<lines.length;i++){","        console.log(lines[i].account)","        ","        ","          // upsert safety net (sum of all safety_net_pathways)","    db.collection(lines[i].account).findAndModify({","        query: {type: \"accumulated_dividends\", currency: data.transaction.Amount.currency}, ","        update:{$inc:{accumulated_amount:Number(dividend_piece)}}, ","        upsert: true,","        new: true","        ","    }, ","        function(err,doc){","            console.log(doc)","        })","        ","    }","","","","","","","}","       ","","// ---------------------------- connect BTC-transaction","","if(accounts.indexOf(data.transaction.Destination) === -1){","    ","console.log(data.transaction.Account + \" consumed outside the network\")","    ","}","","","","})//end remote.on","}//end request_subscribe()","","","","","","}//end module.exports","    ","    ","","","","",""]}]}]]},"ace":{"folds":[],"scrolltop":2237.4444913864136,"scrollleft":12,"selection":{"start":{"row":221,"column":0},"end":{"row":221,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":153,"state":"start","mode":"ace/mode/text"}},"timestamp":1426088150719,"hash":"e1979711f4c70e7cd6a51a75d33d201ac4235e3f"}